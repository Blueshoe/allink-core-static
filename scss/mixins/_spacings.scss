/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

One specific breakpoint ONLY

*/

@mixin make-spacing-top-xs-only($size,$property:'margin') {
    @media (max-width: $screen-xs-max) {
        #{$property}-top: $size;
    }
}

@mixin make-spacing-top-sm-only($size,$property:'margin') {
    @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
        #{$property}-top: $size;
    }
}

@mixin make-spacing-top-md-only($size,$property:'margin') {
    @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
        #{$property}-top: $size;
    }
}

@mixin make-spacing-top-lg-only($size,$property:'margin') {
    @media (min-width: $screen-lg-min) and (max-width: $screen-lg-max) {
        #{$property}-top: $size;
    }
}

@mixin make-spacing-top-xl-only($size,$property:'margin') {
    @media (min-width: $screen-xl-min) and (max-width: $screen-xs-max) {
        #{$property}-top: $size;
    }
}

@mixin make-spacing-top-xxl-only($size,$property:'margin') {
    @media (min-width: $screen-xxl-min) {
        #{$property}-top: $size;
    }
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

MINimum breakpoint and EVERYTHING above

*/

@mixin make-spacing-top-xs($size,$property:'margin') {
    #{$property}-top: $size;
}
@mixin make-spacing-top-sm($size,$property:'margin') {
    @media (min-width: $screen-sm-min) {
        #{$property}-top: $size;
    }
}
@mixin make-spacing-top-md($size,$property:'margin') {
    @media (min-width: $screen-md-min) {
        #{$property}-top: $size;
    }
}
@mixin make-spacing-top-lg($size,$property:'margin') {
    @media (min-width: $screen-lg-min) {
        #{$property}-top: $size;
    }
}
@mixin make-spacing-top-xl($size,$property:'margin') {
    @media (min-width: $screen-xl-min) {
        #{$property}-top: $size;
    }
}
@mixin make-spacing-top-xxl($size,$property:'margin') {
    @media (min-width: $screen-xxl-min) {
        #{$property}-top: $size;
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

MAXimum breakpoint and EVERYTHING below

*/

@mixin make-spacing-top-xs-max($size,$property:'margin') {
    @media (max-width: $screen-xs-max) {
        #{$property}-top: $size;
    }
}
@mixin make-spacing-top-sm-max($size,$property:'margin') {
    @media (max-width: $screen-sm-max) {
        #{$property}-top: $size;
    }
}
@mixin make-spacing-top-md-max($size,$property:'margin') {
    @media (max-width: $screen-md-max) {
        #{$property}-top: $size;
    }
}
@mixin make-spacing-top-lg-max($size,$property:'margin') {
    @media (max-width: $screen-lg-max) {
        #{$property}-top: $size;
    }
}
@mixin make-spacing-top-xl-max($size,$property:'margin') {
    @media (max-width: $screen-xl-max) {
        #{$property}-top: $size;
    }
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// spacing for gird

*/

@mixin make-grid-spacing-base($size, $colum) {
    $next: $colum + 1;
    > *:nth-child(1n+#{$next}) {
        margin-top: $size;
    }
}

@mixin make-grid-spacing-xs($size, $colum) {
    @include make-grid-spacing-base($size, $colum);
}

@mixin make-grid-spacing-sm($size, $colum) {
    @media (min-width: $screen-sm-min) {
        @include make-grid-spacing-base($size, $colum);
    }
}

@mixin make-grid-spacing-md($size, $colum) {
    @media (min-width: $screen-md-min) {
        @include make-grid-spacing-base($size, $colum);
    }
}

@mixin make-grid-spacing-lg($size, $colum) {
    @media (min-width: $screen-lg-min) {
        @include make-grid-spacing-base($size, $colum);
    }
}

@mixin make-grid-spacing-xs-only($size, $colum) {
    @media (max-width: $screen-xs-max) {
        @include make-grid-spacing-base($size, $colum);
    }
}

@mixin make-grid-spacing-sm-only($size, $colum) {
    @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
        @include make-grid-spacing-base($size, $colum);
    }
}

@mixin make-grid-spacing-md-only($size, $colum) {
    @media (min-width: $screen-md-min) and (max-width: $screen-md-max){
        @include make-grid-spacing-base($size, $colum);
    }
}

@mixin make-grid-spacing-lg($size, $colum) {
    @media (min-width: $screen-lg-min) {
        @include make-grid-spacing-base($size, $colum);
    }
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Paddings Ros

*/

@mixin make-padding-row-xs-only($size) {
    @media (max-width: $screen-xs-max) {
        padding-top: $size;
        padding-bottom: $size;
    }
}

@mixin make-padding-row-sm-only($size) {
    @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
        padding-top: ($size);
        padding-bottom: ($size);
    }
}

@mixin make-padding-row-md-only($size) {
    @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
        padding-top: $size;
        padding-bottom: $size;
    }
}

@mixin make-padding-row-xs($size) {
    padding-top: $size;
    padding-bottom: $size;
}

@mixin make-padding-row-sm($size) {
    @media (min-width: $screen-sm-min) {
        padding-top: $size;
        padding-bottom: $size;
    }
}

@mixin make-padding-row-md($size) {
    @media (min-width: $screen-md-min) {
        padding-top: $size;
        padding-bottom: $size;
    }
}

@mixin make-padding-row-lg($size) {
    @media (min-width: $screen-lg-min) {
        padding-top: $size;
        padding-bottom: $size;
    }
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Spacings of content blocks within the .site-content

*/

// in default 'content' placeholder

@mixin content-section-spacing-padding() {
    padding-top: $content-section-spacing-xs;
    padding-bottom: $content-section-spacing-xs;
    @media (min-width:$screen-sm) {
        padding-top: $content-section-spacing-sm;
        padding-bottom: $content-section-spacing-sm;
    }
    @media (min-width:$screen-md) {
        padding-top: $content-section-spacing-md;
        padding-bottom: $content-section-spacing-md;
    }
    @media (min-width:$screen-lg) {
        padding-top: $content-section-spacing-lg;
        padding-bottom: $content-section-spacing-lg;
    }
    @media (min-width:$screen-xl) {
        padding-top: $content-section-spacing-xl;
        padding-bottom: $content-section-spacing-xl;
    }
    @media (min-width:$screen-xxl) {
        padding-top: $content-section-spacing-xxl;
        padding-bottom: $content-section-spacing-xxl;
    }
}

@mixin content-section-spacing-margin() {
    margin-top: $content-section-spacing-xs;
    @media (min-width:$screen-sm) {
        margin-top: $content-section-spacing-sm;
    }
    @media (min-width:$screen-md) {
        margin-top: $content-section-spacing-md;
    }
    @media (min-width:$screen-lg) {
        margin-top: $content-section-spacing-lg;
    }
    @media (min-width:$screen-xl) {
        margin-top: $content-section-spacing-xl;
    }
    @media (min-width:$screen-xxl) {
        margin-top: $content-section-spacing-xxl;
    }
}

// per default, we use the 'spacing-factor' 1.. but sometimes we want to proportionally increase the spacing without adding new variables.
@mixin content-section-specific-spacing($property: 'margin-top', $spacing-factor: 1) {
    #{$property}: $content-section-spacing-xs * $spacing-factor;
    @media (min-width:$screen-sm) {
        #{$property}: $content-section-spacing-sm * $spacing-factor;
    }
    @media (min-width:$screen-md) {
        #{$property}: $content-section-spacing-md * $spacing-factor;
    }
    @media (min-width:$screen-lg) {
        #{$property}: $content-section-spacing-lg * $spacing-factor;
    }
    @media (min-width:$screen-xl) {
        #{$property}: $content-section-spacing-xl * $spacing-factor;
    }
    @media (min-width:$screen-xxl) {
        #{$property}: $content-section-spacing-xxl * $spacing-factor;
    }
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

First and last section withing .site-content

*/

// in default 'content' placeholder

@mixin content-section-first($property: padding-top) {
    // remove margin
    margin-top: 0;
    // add padding
    #{$property}: $content-section-spacing-first-item-xs;
    @media (min-width: $screen-sm) {
        #{$property}: $content-section-spacing-first-item-sm;
    }
    @media (min-width: $screen-md) {
        #{$property}: $content-section-spacing-first-item-md;
    }
    @media (min-width: $screen-lg) {
        #{$property}: $content-section-spacing-first-item-lg;
    }
    @media (min-width: $screen-xl) {
        #{$property}: $content-section-spacing-first-item-xl;
    }
    @media (min-width: $screen-xxl) {
        #{$property}: $content-section-spacing-first-item-xxl;
    }
}

@mixin content-section-last($property: padding-bottom) {
    // remove margin
    margin-bottom: 0;
    // add padding
    #{$property}: $content-section-spacing-last-item-xs;
    @media (min-width: $screen-sm) {
        #{$property}: $content-section-spacing-last-item-sm;
    }
    @media (min-width: $screen-md) {
        #{$property}: $content-section-spacing-last-item-md;
    }
    @media (min-width: $screen-lg) {
        #{$property}: $content-section-spacing-last-item-lg;
    }
    @media (min-width: $screen-xl) {
        #{$property}: $content-section-spacing-last-item-xl;
    }
    @media (min-width: $screen-xxl) {
        #{$property}: $content-section-spacing-last-item-xxl;
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

App Detail

*/

// main container within softpage
@mixin app-detail-softpage-spacing() {
    padding: $app-detail-softpage-spacing-xs;
    @media (min-width: $screen-sm) {
        padding: $app-detail-softpage-spacing-sm;
    }
    @media (min-width: $screen-md) {
        padding: $app-detail-softpage-spacing-md;
    }
    @media (min-width: $screen-lg) {
        padding: $app-detail-softpage-spacing-lg;
    }
    @media (min-width: $screen-xl) {
        padding: $app-detail-softpage-spacing-xl;
    }
    @media (min-width: $screen-xxl) {
        padding: $app-detail-softpage-spacing-xxl;
    }
}

// header section
@mixin app-detail-header-section-spacing($property: margin) {
    // reset first
    padding: 0;
    margin: 0;
    @if $app-detail-header-section-spacing-top {
        @include spacings-size($app-detail-header-section-spacing-top, #{$property}-top);
    }
    @if $app-detail-header-section-spacing-bottom {
        @include spacings-size($app-detail-header-section-spacing-bottom, #{$property}-bottom);
    }
}

// heading container
@mixin app-detail-heading-container-spacing-bottom() {
    // add spacing
    @if $app-detail-heading-container-spacing-bottom {
        @include spacings-size($app-detail-heading-container-spacing-bottom, margin-bottom);
    }
}

// lead (spacing to next element)
@mixin app-detail-spacing-between-lead-and-content() {
    // add spacing
    @if $app-detail-spacing-between-lead-and-content {
        @include spacings-size($app-detail-spacing-between-lead-and-content, margin-top);
    }
}

// created
@mixin app-detail-created-spacing-top() {
    // add spacing
    @if $app-detail-created-spacing-top {
        @include spacings-size($app-detail-created-spacing-top, margin-top);
    }
}

@mixin app-detail-content-section-spacing-padding() {
    @if $app-detail-content-section-spacing {
        @include spacings-size($app-detail-content-section-spacing, padding);
    }
}

@mixin app-detail-content-section-spacing-margin() {
    @if $app-detail-content-section-spacing {
        @include spacings-size($app-detail-content-section-spacing, margin);
    }
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Content Section: Stacked columns

*/

@mixin content-plugin-stacked-col-spacing() {
    margin-bottom: $content-plugin-stacked-col-spacing-xs;
    @media (min-width:$screen-md) {
        margin-bottom: $content-plugin-stacked-col-spacing-md;
    }
    @media (min-width:$screen-xl) {
        margin-bottom: $content-plugin-stacked-col-spacing-xl;
    }
}

@mixin content-plugin-stacked-col-container-negative-spacing() {
    margin-bottom: -$content-plugin-stacked-col-spacing-xs;
    @media (min-width:$screen-md) {
        margin-bottom: -$content-plugin-stacked-col-spacing-md;
    }
    @media (min-width:$screen-xl) {
        margin-bottom: -$content-plugin-stacked-col-spacing-xl;
    }
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Position of absolutely positioned elements (e.g. a text within a parallax)

*/

@mixin content-section-spacing-position($position: bottom) {
    #{$position}: $overlay-spacing-xs;
    @media (min-width:$screen-sm) {
        #{$position}: $overlay-spacing-sm;
    }
    @media (min-width:$screen-md) {
        #{$position}: $overlay-spacing-md;
    }
    @media (min-width:$screen-lg) {
        #{$position}: $overlay-spacing-lg;
    }
    @media (min-width:$screen-xl) {
        #{$position}: $overlay-spacing-xl;
    }
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Overall spacings rules (new approach)

*/

@mixin spacings-size($spacings-size, $property: null, $spacings-map: $spacings-sizes, $spacings-breakpoint: $spacings-breakpoints, $negative: false) {
    // Check if spacings-size is a string (i.e. 'spacing-section-1')
    @if type-of($spacings-size) == string {
        @each $spacings-breakpoint, $spacings-size in map-get($spacings-map, $spacings-size) {
            @if $spacings-breakpoint == null {
                @include make-spacing-size($spacings-size, $property, $negative);
            }
            @else {
                // If $spacings-size is a key that exists in
                // $spacings-breakpoints, use the value
                @if map-has-key($spacings-breakpoints, $spacings-breakpoint) {
                    $spacings-breakpoint: map-get($spacings-breakpoints, $spacings-breakpoint);
                }
                @media screen and (min-width: $spacings-breakpoint) {
                    @include make-spacing-size($spacings-size, $property, $negative);
                }
            }
        }
    }
    // Alternatively use fixed value (i.e. pixel value)
    @else {
        @include make-spacing-size($spacings-size, $property, $negative);
    }
}

// Utility function for mixin spacings-size
@mixin make-spacing-size($spacings-size, $property: 'margin', $negative: false) {
    // If $spacings-size is a list, include
    @if str-index($property, '-') == null {
        @if $negative == false {
            #{$property}-top: $spacings-size;
            #{$property}-bottom: $spacings-size;
        }
        @else {
            #{$property}-top: -$spacings-size;
            #{$property}-bottom: -$spacings-size;
        }
        // Set last child padding to 0, otherwise there's too much spacing
        @if str-index($property, 'padding') == null {
            &:last-child {
                padding-bottom: 0;
            }
        }
    }
    @else {
        @if $negative == false {
            #{$property}: $spacings-size;
        }
        @else {
            #{$property}: -$spacings-size;
        }
        // Set last child padding to 0, otherwise there's too much spacing
        @if str-index($property, 'padding') == null {
            &:last-child {
                padding-bottom: 0;
            }
        }
    }
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Generate spacing classes for content-section plugin

Example:
.content-section.spacing-section-1 {
    ...
}
.content-section.spacing-section-1-top {
    ...
}
.content-section.spacing-section-1-bottom {
    ...
}

*/
@mixin generate-spacings() {
    @each $spacing-name, $spacings-breakpoint in $spacings-sizes {
        &.#{$spacing-name} {
            @include spacings-size($spacing-name, margin);
        }
        &.#{$spacing-name}-top {
            @include spacings-size($spacing-name, margin-top);
        }
        &.#{$spacing-name}-bottom {
            @include spacings-size($spacing-name, margin-bottom);
        }
    }
}
