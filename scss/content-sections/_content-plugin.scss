/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

General Settings

*/

.content-plugin {

    // in case a background image is set
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

    Options (via checkboxes or generated by conditions)

    */

    &.container-enabled {
        .inner {
            @include make-row();
            // on XS we have a smaller column padding
            @include make-row-sm-max();
        }
    }

    &.parallax-enabled {
        overflow: hidden;
        position: relative;
        padding: 0;
        // apply min-height only IF the full height mode is NOT active
        &:not(.full-height-enabled) {
            @include aspect-ratio($parallax-aspect-ratio-width-xs,$parallax-aspect-ratio-height-xs);
            @media (min-width:$screen-md) {
                @include aspect-ratio($parallax-aspect-ratio-width-md,$parallax-aspect-ratio-height-md);
            }
            @media (min-width:$screen-xl) {
                @include aspect-ratio($parallax-aspect-ratio-width-xl,$parallax-aspect-ratio-height-md);
                // has to be set AFTER the ratio mixin
                max-height: $parallax-max-height;
            }
        }
        .bg-image {
            background-repeat: no-repeat;
            height: $parallax-bg-image-height;
            width: 100%;
            background-size: cover;
            background-position: center;
            position: absolute;
            left: 0;
            top: 0;
        }
        .main-col-container {
            position: absolute;
            left: 0;
            right: 0;
            @include content-section-spacing-position();
        }
    }

    &.overlay-enabled {
        position: relative;
        // element only exists, if an OUTER background image has been defined
        .outer-overlay {
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            @include gradient-overlay(50%);
            @media (max-width:$screen-sm-max) {
                background-color: $overlay-background-color-sm-max;
                opacity: $overlay-background-opacity-sm-max;
            }
        }
        // element only exists, if an INNER background image has been defined
        .inner-overlay {
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            @include gradient-overlay(66%);
        }
        .heading {
            color: $overlay-heading-color;
        }
        .text-container {
            > * {
                color: $overlay-text-color;
            }
        }
    }

    &.inner-container-has-bg-image {
        .inner {
            margin: 0;
            position: relative;
        }
        .bg-image-inner {
            background-repeat: no-repeat;
            background-size: cover;
            background-position: center;
            @include aspect-ratio($content-plugin-inner-bg-container-ratio-width-xs,$content-plugin-inner-bg-container-ratio-height-xs);
            @media (min-width:$screen-md) {
                @include aspect-ratio($content-plugin-inner-bg-container-ratio-width-md,$content-plugin-inner-bg-container-ratio-height-md);
            }
            @media (min-width:$screen-xl) {
                @include aspect-ratio($content-plugin-inner-bg-container-ratio-width-xl,$content-plugin-inner-bg-container-ratio-height-md);
            }
        }
        .inner-overlay {
            display: none;
            @media (min-width:$screen-md) {
                display: block;
            }
        }
        .main-text-container {
            @media (min-width:$screen-md) {
                position: absolute;
                @include content-section-spacing-position(bottom);
                @include content-section-spacing-position(left);
                @include content-section-spacing-position(right);
            }
        }
        // reset overlay styles on mobile
        @media (max-width:$screen-sm-max) {
            // specificy wars.. damn it..
            .col-container {
                .col-container-inner {
                    .col {
                        padding-left: 0 !important;
                        padding-right: 0 !important;
                    }
                }
            }
            // let's pretend we're in a manage-spacings context
            .main-text-container {
                @include make-spacing-top-xs($manage-spacings-container-xs);
                @include make-spacing-top-md($manage-spacings-container-md);
                @include make-spacing-top-xl($manage-spacings-container-xl);
            }
            .heading {
                padding-left: 0 !important;
                padding-right: 0 !important;
            }
            &.section-heading-h1 {
                .heading {
                    color: $h1-color;
                }
            }
            &.section-heading-h2 {
                .heading {
                    color: $h2-color;
                }
            }
            .text-container {
                > * {
                    color: $body-color;
                }
            }
        }
    }

    &.has-bg-video {

        position: relative;

        // min heights for mobile image
        @media (max-width:$screen-sm-max) {
            @include aspect-ratio($content-plugin-video-mobile-image-ratio-width,$content-plugin-video-mobile-image-ratio-height);
        }

        .main-col-container {
            position: absolute;
            left: 0;
            right: 0;
            @include content-section-spacing-position();
        }

        // default: display the video proportionally
        .video-container {
            background-size: cover;
            background-position: center center;
            overflow: hidden;

            @media (max-width:$screen-sm-max) {
                position: absolute;
                top: 0;
                right: 0;
                bottom: 0;
                left: 0;
            }

            &.align-right {
                background-position: center right;
            }
            &.align-left {
                background-position: center left;
            }
            .the-video {
                display: none;
                @media (min-width: $screen-md ) {
                    display: block;
                    width: 100% !important;
                    height: auto !important;
                }
            }
        }

        // full height: center video in full height mode
        &.full-height-enabled {
            position: relative;
            width: 100%;
            .video-container {
                position: absolute;
                top: 0;
                right: 0;
                bottom: 0;
                left: 0;
                .the-video {
                    @media (min-width: $screen-md ) {
                        display: block;
                        position: absolute;
                        top: 50%;
                        left: 50%;
                        min-width: 100%;
                        min-height: 100%;
                        width: auto !important;
                        height: auto !important;
                        transform: translate(-50%,-50%);
                    }
                }
            }
        }

    }

    &.full-height-enabled {
        position: relative;
        .main-col-container {
            position: absolute;
            left: 0;
            right: 0;
            @include content-section-spacing-position();
        }
    }

    // section heading of a 'content plugin' entry needs extra padding, because the columns themselves have the column-padding
    .section-heading {
        .heading {
            @include column-paddings();
            @include column-padding-sm-max();
        }
    }

    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

    FLEXBOX Time!

    */

    .col-container-inner {
        display: flex;
    }

    // Mobile Column Ordering.. Flexbox to the rescue!
    // Note: Currently only up to 3 colum templates are supported
    @media (max-width:$screen-sm-max) {
        .col-order-mobile-0 { order: 0; }
        .col-order-mobile-1 { order: 1; }
        .col-order-mobile-2 { order: 2; }
        // .col-order-mobile-3 { order: 3; }
        // .col-order-mobile-4 { order: 4; }
        // .col-order-mobile-5 { order: 5; }
    }

    // vertical alignment
    @media (min-width:$screen-md) {
        .align-v-desktop-top {  align-self: flex-start; }
        .align-v-desktop-middle {  align-self: center; }
        .align-v-desktop-bottom {  align-self: flex-end; }
    }


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

    Column Definitions

    */

    // on small screens, we don't want empty columns to be displayed
    .col-empty {
        @media (max-width:$screen-sm-max) {
            display: none;
        }
    }

    .col-1 {
        // overflow: hidden; // The negativ margin of the make-row() mixin causes the content to overflow. Let's hide it.
        .col {
            @include make-xs-column(24);
        }
    }

    .col-1-1 {
        @include content-plugin-col-mobile-flexbox();
        @include content-plugin-col-mobile-flexbox-spacing-fix();
        .col {
            @include make-spacing-top-sm-max($content-section-col-stack-spacing-sm-max);
            @include make-xs-column(24);
            @include make-md-column(12);
        }
    }

    .col-2-1 {
        @include content-plugin-col-mobile-flexbox();
        @include content-plugin-col-mobile-flexbox-spacing-fix();
        .col {
            @include make-spacing-top-sm-max($content-section-col-stack-spacing-sm-max);
        }
        .col-1 {
            @include make-xs-column(24);
            @include make-md-column(12);
            @include make-lg-column(16);
        }
        .col-2 {
            @include make-xs-column(24);
            @include make-md-column(12);
            @include make-lg-column(8);
        }
    }

    .col-1-2 {
        @include content-plugin-col-mobile-flexbox();
        @include content-plugin-col-mobile-flexbox-spacing-fix();
        .col {
            @include make-spacing-top-sm-max($content-section-col-stack-spacing-sm-max);
        }
        .col-1 {
            @include make-xs-column(24);
            @include make-md-column(12);
            @include make-lg-column(8);
        }
        .col-2 {
            @include make-xs-column(24);
            @include make-md-column(12);
            @include make-lg-column(16);
        }
    }

    .col-3 {
        @include content-plugin-col-mobile-flexbox($flex-bp: $screen-xs-max);
        @include content-plugin-col-mobile-flexbox-spacing-fix($flex-bp: $screen-sm-max);
        .col {
            @include make-xs-column(24);
            @include make-sm-column(12);
            @include make-md-column(8);
            @include make-spacing-top-sm-max($content-section-col-stack-spacing-sm-max);
        }
    }

    .col-4 {
        // equalizes the margin bottom of the columns
        @include content-plugin-stacked-col-container-negative-spacing();
        .col {
            // add margin bottom to all columns
            @include content-plugin-stacked-col-spacing();
            @include make-xs-column(24);
            @include make-sm-column(12);
            @media (min-width:$screen-sm) {
                &:nth-child(2n+1) { clear: left; }
            }
            @include make-md-column(6);
            @media (min-width:$screen-md) {
                &:nth-child(2n+1) { clear: none; }
                &:nth-child(4n+1) { clear: left; }
            }
        }
    }

    .col-5 {
        // equalizes the margin bottom of the columns
        @include content-plugin-stacked-col-container-negative-spacing();
        .col {
            // add margin bottom to all columns
            @include content-plugin-stacked-col-spacing();
            @include make-xs-column(12);
            @media (min-width:$screen-xs) {
                &:nth-child(2n+1) { clear: left; }
            }
            @include make-sm-column(8);
            @media (min-width:$screen-sm) {
                &:nth-child(2n+1) { clear: none; }
                &:nth-child(3n+1) { clear: left; }
            }
            @include make-md-column(6);
            @media (min-width:$screen-md) {
                &:nth-child(3n+1) { clear: none; }
                &:nth-child(4n+1) { clear: left; }
            }
            @media (min-width:$screen-lg) {
                width: 20%;
                &:nth-child(4n+1) { clear: none; }
                &:nth-child(5n+1) { clear: left; }
            }
        }
    }

    .col-6 {
        // equalizes the margin bottom of the columns
        @include content-plugin-stacked-col-container-negative-spacing();
        .col {
            // add margin bottom to all columns
            @include content-plugin-stacked-col-spacing();
            @include make-xs-column(12);
            @media (min-width:$screen-xs) {
                &:nth-child(2n+1) { clear: left; }
            }
            @include make-sm-column(8);
            @media (min-width:$screen-sm) {
                &:nth-child(2n+1) { clear: none; }
                &:nth-child(3n+1) { clear: left; }
            }
            @include make-md-column(4);
            @media (min-width:$screen-md) {
                &:nth-child(3n+1) { clear: none; }
                &:nth-child(6n+1) { clear: left; }
            }
            @include make-lg-column(4);
            @media (min-width:$screen-lg) {
                &:nth-child(3n+1) { clear: none; }
                &:nth-child(6n+1) { clear: left; }
            }
        }
    }

    // add smaller columns on XS (big ass selector, but we have to fight the specifcy war in order to avoid an !important). The only alternative would be to add this mixin to all columns, which wouldn't be pretty either.
    .main-col-container {
        .col-container {
            .col {
                @include column-padding-sm-max();
            }
        }
    }

}
